package com.robert.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.robert.fileRead.ReadLines;


@Controller
public class FileController {
	
	@Value("${dir.files}")
	private String uploadingdir;
	
	// public static final String uploadingdir = System.getProperty("dir.files");
    
    
	// =====================================================
	// gestion des fichiers 
	// =====================================================
    @RequestMapping(value="/files", method=RequestMethod.GET)  
    public String manageFiles(Model model) {
    	File folder = new File(uploadingdir);
		
		/*Get files*/
		File[] files = folder.listFiles();
		/*
		for (File file : files) {
			if(file.isFile()){
				System.out.println("File : "+file.getName());
			}else{
				System.out.println("Folder : $"+file.getName()+"$");
			}
		}
		*/
		model.addAttribute("files", files);
        return "files/index";
    }
	
	// =====================================================
	// téléchargement de plusieurs fichiers
	// =====================================================
	@RequestMapping(value = { "/fileUpload"}, method = RequestMethod.GET ) 
	public String uploadingGet(Model model) {
		File file = new File(uploadingdir);
        model.addAttribute("files", file.listFiles());	
		return "files/index";
	}
	
	@RequestMapping(value = {"/fileUpload"}, method = RequestMethod.POST)
    public String uploadingPost(@RequestParam("uploadingFiles") MultipartFile[] uploadingFiles) throws IOException {
		// ================================
	 	// Création du répertoire s'il n'existe pas
		// ================================
    	File folder  = new File(uploadingdir);
    	if (!folder.exists()) {
            if (folder.mkdir()) {
                System.out.println("Directory is created!");
            } else {
                System.out.println("Failed to create directory!");
            }
        }
    	// ================================
    	// Transfert des fichiers
    	// ================================
        for(MultipartFile uploadedFile : uploadingFiles) {
        	 System.out.println("file read: "+uploadingdir +uploadedFile.getOriginalFilename());
            File file = new File(uploadingdir + uploadedFile.getOriginalFilename());
            uploadedFile.transferTo(file);
        }
        return "redirect:/files";
    }
	
	// =============================================================
	// lister les fichiers d'un répertoire
	// =============================================================
	
	@RequestMapping(value = { "/fileList" }) 
	public String  fileList(Model model) {
		File folder=new File(uploadingdir);
		
		/*Get files*/
		File[] files=folder.listFiles();
		/*
		for (File file : files) {
			if(file.isFile()){
				System.out.println("File : "+file.getName());
			}else{
				System.out.println("Folder : $"+file.getName()+"$");
			}
		}
		*/
		model.addAttribute("files", files);
		return "files/filesList"; 
	}
	// =============================================================
	// lecture des fichiers du répertoire
	// =============================================================	
	@RequestMapping(value = { "/fileRead" }) 
	public String readAllFiles( Model model) {
		
		File folder=new File(uploadingdir);
		/*Get files*/
		File[] files=folder.listFiles();
		for (File fichier : files) {	
			ReadLines r = new ReadLines();
			/*
			System.out.println("$"+fichier.getAbsolutePath()+"$");
			System.out.println("$"+fichier.getAbsoluteFile()+"$");
			System.out.println("$"+fichier.getPath()+"$");
			System.out.println("$"+fichier.isFile()+"$");
			System.out.println("$"+fichier.getName()+"$");
			 */

			r.fileRead(fichier.getPath());
		}
		return "files/filesList";		
	}
	
	// =============================================================
	// traitement des fichiers en Python
	// =============================================================	
	@RequestMapping(value = { "/processFiles" }, method=RequestMethod.GET) 
	public String processFiles( Model model ) {
		File folder = new File(uploadingdir);
		File[] files = folder.listFiles();
		String[] results = new String[files.length]; int i = 0;
		for (File fichier : files) {	
			results[i] = fichier.getName();
			i++;
			try{
	            ProcessBuilder builder = new ProcessBuilder("python", "events.py", fichier.getAbsolutePath());
	            builder.redirectErrorStream(true);
	            Process p = builder.start();
	            InputStream stdout = p.getInputStream();
	            BufferedReader reader = new BufferedReader (new InputStreamReader(stdout, "UTF-8"));

	            String line;
	            while ((line = reader.readLine ()) != null) {
	                System.out.println (line);
	            }
	        } catch (Exception e){
	            e.printStackTrace();
	        }
		}
		model.addAttribute("results", results);
		return "/files/download";
	}
	
	
	// =============================================================
	// lecture d'un fichier du répertoire
	// =============================================================	
	@RequestMapping(value = { "/fileRead/{name}" }) 
	public String fileRead(Model model,
			@PathVariable("name")String name) {
		
		
		int indice = 0; // compteur de lecture des fichiers
		// ==========================================
		// Init répertoire des fichiers
		// ==========================================
		File folder=new File(uploadingdir);
		
		// ===========================================
		// récupération des noms des fichiers dans un tableau
		// ===========================================
		String chekedFiles[] = name.split(",");
		for(int i = 0 ; i < chekedFiles.length ; i++)
		{
		    String f = chekedFiles[i];
		    String[] racine = f.split("\\.");
		    chekedFiles[i] =racine[0];
		   // System.out.println("fichier avant boucle: "+ f);
		   // System.out.println("fichier avec boucle sans extension: "+ chekedFiles[i]);
			// ========================================
			// lecture du fichier du répertoire
			// ========================================
			File[] files=folder.listFiles();
			String First =null;
			for (File fichier : files) {
				String fileName=fichier.getName();
				//System.out.println(fileName);
				String[] result = fileName.split("\\.");
				First = result[0];
				String Second = result[1];
				
				if(First.equals(chekedFiles[i])) {
					ReadLines r  = new ReadLines();
					r.fileRead(fichier.getPath());
					indice = indice + 1;
					System.out.println("\nTest concluant le fichier : "+fichier.getName());
					System.out.println("=================================");
					System.out.println("traitement à faire sur le fichier");
					System.out.println("=================================");
					break;
				}
			}
		}
		return "files/filesList";	
	}	
}
